package level2;

public class 피보나치수 {

	public static void main(String[] args) {
		/*
		 * 문제 설명 
		 * 피보나치 수는 F(0) = 0, F(1) = 1일 때, 1 이상의 n에 대하여 
		 * F(n) = F(n-1) + F(n-2) 가 적용되는 수 입니다.
		 * 
		 * 예를들어
		 * 
		 * F(2) = F(0) + F(1) = 0 + 1 = 1 
		 * F(3) = F(1) + F(2) = 1 + 1 = 2 
		 * F(4) = F(2) + F(3) = 1 + 2 = 3 
		 * F(5) = F(3) + F(4) = 2 + 3 = 5 
		 * 
		 * 와 같이 이어집니다.
		 * 
		 * 2 이상의 n이 입력되었을 때, n번째 피보나치 수를 1234567으로 나눈 나머지를 
		 * 리턴하는 함수, solution을 완성해 주세요.
		 * 
		 * 제한 사항 
		 * n은 2 이상 100,000 이하인 자연수입니다.
		 * 
		 */
	}
	
    public int solution(int n) {
    	/*
    	 * 내가 문제 푸는 방법
    	 * 
    	 * 전체적으로 F(N)을 구하기 위해선 N번째를 기준으로 N-1, N-2 번째를 더하면 된다.
    	 * 
		 *  
		 *  2번 째 피보나치 : 1
		 *  				 	+1	
    	 *  3번 째 피보나치 : 2			
    	 * 						+1		
    	 *  4번 째 피보나치 : 3		+1
    	 * 						+2		
    	 *  5번 째 피보나치 : 5		+1		
    	 * 						+3		+1	
    	 *  6번 째 피보나치 : 8 		+2		
    	 * 						+5		+1	
    	 *  7번 째 피보나치 : 13 		+3		+1
		 *						+8		+2		
    	 *  8번 째 피보나치 : 21  		+5		+1
    	 * 						+13		+3		+1
    	 *  9번 째 피보나치 : 34 		+8		+2
    	 * 						+21		+5
    	 * 10번 째 피보나치 : 55 		+13
    	 * 						+34
    	 * 11번 째 피보나치 : 89 
    	 * ...
    	 * ...
    	 * n번 째 피보나치 :  
    	 * 
    	 */
    	int[] farr = new int[n+1];
    	farr[0] = 0;
		farr[1] = 1;
    	for(int i = 2 ; i <= n; i++) {
    		farr[i]	= farr[i-1]%1234567 + farr[i-2]%1234567;
    	}
    	
        int answer = farr[n];
        return answer;
    }

}

/*
 * n번 째 피보나치수는 자리수가 long 타입이 나타낼 수 있는 수를 넘어간다
 * => 나머지 연산자를 각 연산마다 진행해주어 가장 작은 수의 자리(나머지 자리)만 비교해주도록 하면
 * 오버플로우를 피하여 연산이 가능하다.
 * 
 */


