package level2;

public class 멀리뛰기 {

	public static void main(String[] args) {
		/*
		 * 
		 * 문제 설명 
		 * 효진이는 멀리 뛰기를 연습하고 있습니다. 
		 * 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다.
		 * 칸이 총 4개 있을 때, 효진이는(1칸, 1칸, 1칸, 1칸) (1칸, 2칸, 1칸) 
		 * (1칸, 1칸, 2칸) (2칸, 1칸, 1칸) (2칸, 2칸) 의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다. 
		 * 
		 * 멀리뛰기에 사용될 칸의 수 n이 주어질 때, 효진이가 끝에 도달하는 방법이 몇 가지인지 알아내, 
		 * 여기에 1234567를 나눈 나머지를 리턴하는 함수, solution을 완성하세요. 
		 * 예를 들어 4가 입력된다면, 5를 return하면 됩니다.
		 * 
		 * 제한 사항 
		 * n은 1 이상, 2000 이하인 정수입니다.
		 */

	}
	
    public long solution(int n) {
    	/*
    	 * 내가 푸는 방법
    	 * 
    	 * <배열> 이용, 한 번 뛸 때를 하나의 원소로 취하면.
    	 * 1. 2칸을 뛰는 경우가 가장 많을 때, 배열의 길이 => n/2(n이 짝수) or n/2 +1(n이 홀수)
    	 * 2. 1칸씩만 뛰는 경우, 배열의 길이 => n
    	 * 
    	 * 3. 1칸과 2칸이 섞여 있는 경우 => 1의 위치는 2에 의해 변경된다 가정하면
    	 * 전체 배열의 길이 중에 2가 중복 안되게 배치될 수 있는 개수를 구하면됨.
    	 * => 배열의 길이는 똑같지만, (1,1,2) 와 (2,1,1)이 다른 것 처럼, 모든 경우의 수를 구해야한다. 
    	 * 
    	 * 4. 배열이 짝수이면, 
    	 * 2가 n/2회 들어갈 때 => 배열의 길이 : n/2, 1회
    	 * 2가 n/2회-1 들어갈 때, 1이 2회 들어갈 때 => 배열의 길이 : n/2-1 +(2), n/2+1 회
    	 * 2가 n/2회-2 들어갈 때, 1이 4회 들어갈 때 => 배열의 길이 : n/2-2 +(4), n/2+2회
    	 * 2가 n/2회-k 들어갈 때, 1이 2k회 들어갈 때 => 배열의 길이 : n/2-k + (2k), n/2+k회
    	 * 2가 n/2회-n/2 들어갈 때, 1이 2(n/2)회 들어갈 때 => 배열의 길이 : n, 0회
    	 */
    	
    	long answer = 0;
        return answer;
    }

}
