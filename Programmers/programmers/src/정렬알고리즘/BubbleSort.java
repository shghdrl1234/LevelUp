package 정렬알고리즘;

public class BubbleSort {
/*
 * 거품정렬은 정렬 방식 중 가장 쉽게 생각할 수 있는 알고리즘 중 하나다.
 * 
 * 두 개의 인접한 원소를 비교하여 정렬하는 방식이다.
 * 거품 정렬은 데이터를 비교하면서 찾기 때문에 비교정렬이며 정렬의 대상이 되는 데이터 외에
 * 추가적인 공간을 필요로 하지 않기 때문에 제자리 정렬이기도 하다.
 * 
 * 정확히는 데이터를 서로 교환하는 과정에서 임시 변수를 필요로 하나, 이는 충분히 무시할 만큼
 * 적은 양이기 때문에 제자리 정렬로 보는 것이다. 이는 선택 정렬과도 같은 부분이다.
 * 
 * 그리고 거품정렬은 앞에서부터 차례대로 비교하기 때문에 안정정렬이기도 하다.
 * 
 * 정렬 방법으로는
 * 1. 앞에서부터 현재 원소와 바로 다음의 원소를 비교한다.
 * 2. 현재 원소가 다음 원소보다 크면 원소를 교환한다.
 * 3. 다음 원소로 이동하여 해당 원소와 그 다음원소를 비교한다.
 * 
 * 각 라운드를 진행할 때마다 뒤에서부터 한 개씩 정렬되기 때문에, 라운드가 진행될 때 마다 한 번씩
 * 줄면서 비교하게 된다.
 * 
 * 총 라운드는 배열 크기-1 번 진행되고, 각 라운드별 비교 횟수는 배열크기- 라운드 횟수 만큼 비교한다.
 * 
 * 거품 정렬의 장점으로는
 * 1. 추가적인 메모리 소비가 적다.
 * 2. 구현이 매우 쉽다.
 * 3. 안정정렬이 가능하다.
 * 
 * 단점으로는 
 * 1. 다른 정렬 알고리즘에 비해 교환 과정이 많아 많은 시간을 소비한다.
 * 
 * 
 */
	public static void bubble_sort(int[] a) {
		bubble_sort(a, a.length);
	}
	
	private static void bubble_sort(int[] a, int size) {
		
		// round는 배열 크기 - 1 만큼 진행됨 
		for(int i = 1; i < size; i++) {
			
			// boolean 타입 변수는 지정안해주고, 뒤에 나오는 if문도 안해줘도 되지만,
			// 이렇게 하면, 반복문의 효율이 더 좋아짐
//			boolean swapped = false;	
			
			// 각 라운드별 비교횟수는 배열 크기의 현재 라운드를 뺀 만큼 비교함
			for(int j = 0; j < size - i; j++) {
				
				/*
				 *  현재 원소가 다음 원소보다 클 경우
				 *  서로 원소의 위치를 교환하고
				 *  비교수행을 했다는 표시로 swapped 변수를 true로 변경한다.
				 */
				if(a[j] > a [j + 1]) {
					swap(a, j, j + 1);
//					swapped = true;
				}
			}
            
			/*
			 * 만약 swap된적이 없다면 이미 정렬되었다는 의미이므로
			 * 반복문을 종료한다. 
			 */
//			if(swapped == false) {
//				break;
//			}
		}
	}
	
	private static void swap(int[] a, int i, int j) {
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
}
